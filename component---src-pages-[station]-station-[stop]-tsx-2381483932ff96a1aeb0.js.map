{"version":3,"file":"component---src-pages-[station]-station-[stop]-tsx-2381483932ff96a1aeb0.js","mappings":"+tv5BAsBO,MAAMA,E,k6+6EACAC,EAAiDC,E,wBCkB9D,MA9B6BC,IAAwC,YAAvC,OAAEC,GAAgC,EAC9D,MAAMC,EAAYD,EAAOE,QACnBA,EAAUL,EAAaI,GACvBE,EAASH,EAAOI,KAChBC,GAAcH,aAAO,EAAPA,EAASI,MAAMH,KAAW,GACxCI,EAASF,EAAYG,KAAIC,GAAWb,EAAWa,KAC/CC,EAAUR,GAAWG,EAAYM,OAAS,GAAKJ,EAAOK,OAAMC,GAASA,IAErEC,EAAa,CACjBC,YAAsB,QAAX,EAAER,EAAO,UAAE,aAATS,EAAWC,KACxBC,OAAQX,EAAOC,KAAIK,GAASA,EAAMM,QAClChB,OAAiB,QAAX,EAAEI,EAAO,UAAE,aAATa,EAAWhB,MAEfiB,EAAcd,EAAOC,KAAIK,IAAS,CAAGS,GAAIT,EAAMM,MAAOI,KAAMV,EAAMW,cAQxE,OANAC,EAAAA,WAAgB,KACTf,IACHgB,EAAAA,EAAAA,UAAS,OACX,GACC,CAAChB,IAGFe,EAAAA,cAACE,EAAAA,EAAM,KACJjB,GACCe,EAAAA,cAACG,EAAAA,EAAQ,CAACrB,OAAQ,CAACO,GAAae,MAAOtB,EAAO,GAAGuB,SAAUT,YAAaA,IAEnE,EAMN,MAAMU,EAAOA,IAAMN,EAAAA,cAAAA,QAAAA,KAAO,W","sources":["webpack://el-track/./src/config/index/index.ts","webpack://el-track/./src/pages/station/[station]/[stop].tsx"],"sourcesContent":["import stationData from \"./stations.json\";\nimport trackData from \"./tracks.json\";\n\ntype Track = {\n  type: string;\n  route: string;\n  routeName: string;\n  stop: string;\n  stopName: string;\n  direction: string;\n  headsign: string[];\n}\n\ntype Station = {\n  name: string;\n  stops: StopTracks;\n}\n\ntype StopTracks = {\n  [stopId: string]: string[];\n}\n\nexport const trackIndex: { [trackId: string]: Track } = trackData;\nexport const stationIndex: { [stationId: string]: Station } = stationData;\n","import { navigate } from \"gatsby\";\nimport * as React from \"react\";\nimport { stationIndex, trackIndex } from \"../../../config/index\";\nimport Layout from \"../../../features/layout/Layout\";\nimport Arrivals from \"../../../features/track/Arrivals\";\n\ntype PathParams = {\n  station: string;\n  stop: string;\n};\n\nconst StationStopTrackPage = ({ params }: { params: PathParams }) => {\n  const stationId = params.station;\n  const station = stationIndex[stationId];\n  const stopId = params.stop;\n  const trackIdList = station?.stops[stopId] || [];\n  const tracks = trackIdList.map(trackId => trackIndex[trackId]);\n  const isValid = station && trackIdList.length > 0 && tracks.every(track => track);\n\n  const trackInput = {\n    transitType: tracks[0]?.type as 'train' | 'bus',\n    routes: tracks.map(track => track.route),\n    stopId: tracks[0]?.stop,\n  }\n  const routeFilter = tracks.map(track => ({ id: track.route, name: track.routeName }));\n\n  React.useEffect(() => {\n    if (!isValid) {\n      navigate(\"/404\");\n    }\n  }, [isValid]);\n\n  return (\n    <Layout>\n      {isValid &&\n        <Arrivals tracks={[trackInput]} title={tracks[0].stopName} routeFilter={routeFilter} />\n      }\n    </Layout>\n  );\n};\n\nexport default StationStopTrackPage;\n\nexport const Head = () => <title>El Track</title>\n"],"names":["trackIndex","stationIndex","stationData","_ref","params","stationId","station","stopId","stop","trackIdList","stops","tracks","map","trackId","isValid","length","every","track","trackInput","transitType","_tracks$","type","routes","route","_tracks$2","routeFilter","id","name","routeName","React","navigate","Layout","Arrivals","title","stopName","Head"],"sourceRoot":""}